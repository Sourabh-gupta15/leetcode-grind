https://leetcode.com/problems/coin-change/

class Solution {
public:
// int solveUsingRecursion(vector<int>&coins,int amount)
// {
//     //base case
//     if(amount==0){
//         return 0;
//     }
//     if(amount<0){
//         return INT_MIN;
//     }
//     //recursive relation
//     int mini=INT_MAX;
//     for(int i=0;i<coins.size();i++){
//         //find ans using ith coin
//         int recursionKa=0;
//         if(amount-coins[i]>=0){
            
        
//         recursionKa=solveUsingRecursion(coins,amount-coins[i]);
//         int ans=1+recursionKa;
//         mini=min(mini,ans);}
    
//     }
//     return mini;
// }
    int solveUsingMem(vector<int>&coins,int amount,vector<int>&dp){
         //base case
    if(amount==0){
        return 0;
    }
   
        //check
        if(dp[amount]!=-1){
            return dp[amount];
        }
    //recursive relation
    int mini=INT_MAX;
    for(int i=0;i<coins.size();i++){
        //find ans using ith coin
        
        if(amount-coins[i]>=0){
            
        
      int  recursionKa=solveUsingMem(coins,amount-coins[i],dp);
            if(recursionKa!=INT_MAX){
        int ans=1+recursionKa;
        mini=min(mini,ans);}}
    
    }
        dp[amount]=mini;
        
    return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
        // int ans= solveUsingRecursion(coins,amount);
        // if(ans==INT_MAX){
        //     return -1;
        // }
        // else{
        //     return ans;
       // }
        int n=amount;
        vector<int>dp(n+1,-1);
        int ans=solveUsingMem(coins,amount,dp);
         if(ans==INT_MAX){
            return -1;
        }
        else{
            return ans;
       }
    }
};
