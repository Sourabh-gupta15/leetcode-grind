https://leetcode.com/problems/palindrome-linked-list/description/?envType=daily-question&envId=2024-03-22

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
   ListNode * reverse(ListNode *&prev,ListNode*&curr){
       if(curr==NULL){
           return  prev ;
       }
       ListNode*nextNode=curr->next;
       curr->next=prev;
       prev =curr;
       curr=nextNode;
       return reverse(prev,curr);
   }
    ListNode* middleNode(ListNode* head) {
        ListNode* node1=head;
        ListNode* node2=head;

        while(node1->next!=NULL ){
            node1=node1->next;
            if(node1->next!=NULL){
                node1=node1->next;
                node2=node2->next;
            }
            

        }
        return node2;}
        bool compare(ListNode *head,ListNode*node2){
            while(head!=NULL&&node2!=NULL){
                if(head->val!=node2->val){
                    return false;
                }
                else{
                    head=head->next;
                    node2=node2->next;
                }



            }
            return true;
        }

    bool isPalindrome(ListNode* head) {
        ListNode*midNode=middleNode(head);
        ListNode*node2=midNode->next;
        midNode->next=NULL;
        ListNode*prev=NULL;
        ListNode*curr=node2;
       node2= reverse(prev,curr);
       //compare
       bool ans=compare(head,node2);
       return ans;




        
    }
};
