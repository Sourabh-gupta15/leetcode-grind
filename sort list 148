https://leetcode.com/problems/sort-list/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

ListNode*findMid(ListNode*&head){
    ListNode*slow=head;
    ListNode*fast=head->next;
    while(fast&&fast->next){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
       ListNode*merge(ListNode*left,ListNode*right){
           if(left==0)return right;
           if(right==0)return left;
           ListNode*ans=new ListNode(-1);
           ListNode*ptr=ans;
           while(left&&right){
               if(left->val<=right->val){
                   ptr->next=left;
                   ptr=left;
                   left=left->next;
               }
               else{
                   ptr->next=right;
                   ptr=right;
                   right=right->next;
               }
           }
           if(left){
               ptr->next=left;

           }
           if(right){
               ptr->next=right;
           }
           return ans->next;
       }
    
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next){
            return head;
        }
        //break ll in two half using mid node;
        ListNode*mid=findMid(head);
      ListNode*left=head;
      ListNode*right=mid->next;
      mid->next=0;


// sort RE
left=sortList(left);
right=sortList(right);
//merge both left and right lls
ListNode*merged=merge(left,right);
return merged;

    }
};
