https://leetcode.com/problems/rotate-list/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
int getLength(ListNode*&head){
    ListNode*temp=head;
    int len=0;
    while(temp!=0){
        len++;
        temp=temp->next;
    }
    return len;
}
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head||!head->next) return head;
        
        
        int len=getLength(head);
        int actualRotateK=(k%len);
        if(actualRotateK==0){
            return head;
        }
        int x= len-actualRotateK-1;
        
        ListNode*newLastNode=head;
        for(int i=0;i<x;i++){
            newLastNode=newLastNode->next;

        }
        ListNode*newHead=newLastNode->next;
        newLastNode->next=nullptr;
        ListNode*it=newHead;
        while(it->next){
            it=it->next;
        }
        it->next=head;
        return newHead;
      
    }
};
